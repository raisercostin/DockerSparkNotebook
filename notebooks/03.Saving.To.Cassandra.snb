{
  "metadata" : {
    "name" : "Saving To Cassandra",
    "user_save_timestamp" : "1970-01-01T00:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T00:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "43739350E8F448AB98D0B359B3B2A685"
    },
    "cell_type" : "markdown",
    "source" : "#### Writing a DataFrame / DataSet to Cassandra"
  }, {
    "metadata" : {
      "id" : "E3C025B3871A49418A48B652DF2DFBC7"
    },
    "cell_type" : "markdown",
    "source" : "We need to add extra JARs to the classpath to make this work."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1259234090-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "EA56011E34714A7B8F7476159E45E522"
    },
    "cell_type" : "code",
    "source" : ":cp\n/opt/docker/lib/spark-cassandra-connector.jar\n/opt/docker/lib/jsr166e.jar",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8E5EE59BBD534DCBB37E5CFE3BE3D078"
    },
    "cell_type" : "code",
    "source" : "import scala.util.Try\nimport com.datastax.spark.connector._",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "7D39402557D34380B7470BB14DE02CC0"
    },
    "cell_type" : "code",
    "source" : "case class Country (country_id: Long, continent_id: Long, country_name: String)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "8E92D27D005F42C5843CAB5D0B8C81BD"
    },
    "cell_type" : "markdown",
    "source" : "For reference, here are the Cassandra definitions we are going to need further down below."
  }, {
    "metadata" : {
      "id" : "C358970F4B5C4C31BFC43878A629D6A1"
    },
    "cell_type" : "markdown",
    "source" : "```\nCREATE KEYSPACE spark_ks WITH REPLICATION = { 'class': 'SimpleStrategy', 'replication_factor': 1 };\n\nCREATE TABLE spark_ks.spark_countries (\n  country_id INT,\n  continent_id INT,\n  country_name TEXT,\n  PRIMARY KEY ((country_id))\n);\n\nCREATE TABLE spark_ks.spark_countries_with_github_id (\n  github_id TEXT,\n  country_id INT,\n  continent_id INT,\n  country_name TEXT,\n  PRIMARY KEY ( (github_id), country_id )\n);\n```"
  }, {
    "metadata" : {
      "id" : "7383283491204D6A80D4CBFDBA538049"
    },
    "cell_type" : "markdown",
    "source" : "Here we are configuring the Cassandra host name in the Spark application."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "155878387C8A4FB58BA1B540BC3D157F"
    },
    "cell_type" : "code",
    "source" : "Try(sparkSession.stop)\n\nval CASSANDRA_HOST = \"dbserver\"\n\nval spark =\n  SparkSession\n    .builder\n    .master(\"local[*]\")\n    .config(\"spark.cassandra.connection.host\", CASSANDRA_HOST)\n    .getOrCreate\n\nval countrySchema = Encoders.product[Country].schema\n\nval countriesDS = spark.read.schema(countrySchema).csv(\"/opt/SparkDatasets/geography/countries.csv\").as[Country]",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "F30A723EC0984AF3B862638D3EAE8C11"
    },
    "cell_type" : "markdown",
    "source" : "Finally, here we are saving the data into Cassandra."
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "155878387C8A4FB58BA1B540BC3D157F"
    },
    "cell_type" : "code",
    "source" : "countriesDS\n  .write\n  .format(\"org.apache.spark.sql.cassandra\")\n  .mode(SaveMode.Append)\n  .options( Map(\"keyspace\" -> \"spark_ks\", \"table\" -> \"spark_countries\") )\n  .save",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "141D0AACF03341408FDFFB4468D38EF8"
    },
    "cell_type" : "code",
    "source" : "val GH: String = \"your_github_id_goes_here\"",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A3A6DF32B34B4EC0969BB627D9AAA251"
    },
    "cell_type" : "code",
    "source" : "countriesDS.withColumn(\"github_id\", lit(GH))",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A3A6DF32B34B4EC0969BB627D9AAA251"
    },
    "cell_type" : "code",
    "source" : "countriesDS\n  .withColumn(\"github_id\", lit(GH))\n  .write\n  .format(\"org.apache.spark.sql.cassandra\")\n  .mode(SaveMode.Append)\n  .options( Map(\"keyspace\" -> \"spark_ks\", \"table\" -> \"spark_countries_with_github_id\") )\n  .save",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}